1.spring默认支持
==在spring3之后，任何支持JSR303的validator（如Hibernate Validator）都可以通过简单配置引入，只需要在配置xml中加入
==这时validatemessage的属性文件默认为classpath下的ValidationMessages.properties
==support JSR303 annotation if JSR 303 validation present on classpath
<mvc:annotation-driven />

2.说明
==JSR 303 – Bean Validation 规范 http://jcp.org/en/jsr/detail?id=303
==Hibernate Validator 提供了 JSR 303 规范中所有内置 constraint 的实现，除此之外还有一些附加的 constraint
==Hibernate Validator 是 Bean Validation 的参考实现

4.原理简介
一个 constraint 通常由 annotation 和相应的 constraint validator 组成，它们是一对多的关系。
也就是说可以有多个 constraint validator 对应一个 annotation。在运行时，Bean Validation
框架本身会根据被注释元素的类型来选择合适的 constraint validator 对数据进行验证。

5.扩展
有些时候，在用户的应用中需要一些更复杂的 constraint。Bean Validation 提供扩展 constraint 的机制。
可以通过两种方法去实现，一种是组合现有的 constraint 来生成一个更复杂的 constraint，另外一种是开发一个
全新的 constraint

6.hibernate 5.4.1.Final主页
https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#validator-gettingstarted-createproject
==<!--This transitively pulls in the dependency to the Bean Validation API (javax.validation:validation-api:1.1.0.Final).-->
==如果在非容器下运行，可能还需要添加以下依赖包
<dependency>
    <groupId>org.glassfish</groupId>
    <artifactId>javax.el</artifactId>
    <version>3.0.1-b08</version>
</dependency>
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-validator-cdi</artifactId>
    <version>5.4.1.Final</version>
</dependency>

